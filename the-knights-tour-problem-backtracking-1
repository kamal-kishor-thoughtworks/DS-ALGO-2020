/*
KNIGHT TOUR PROBLEM  :  https://www.geeksforgeeks.org/the-knights-tour-problem-backtracking-1/ 
NOTE : This code is the most naive solution

Description from GFG :

Backtracking Algorithm for Knight’s tour
Following is the Backtracking algorithm for Knight’s tour problem.

If all squares are visited 
    print the solution
Else
   a) Add one of the next moves to solution vector and recursively 
   check if this move leads to a solution. (A Knight can make maximum 
   eight moves. We choose one of the 8 moves in this step).
   b) If the move chosen in the above step doesn't lead to a solution
   then remove this move from the solution vector and try other 
   alternative moves.
   c) If none of the alternatives work then return false (Returning false 
   will remove the previously added item in recursion and if false is 
   returned by the initial call of recursion then "no solution exists" )
Following are implementations for Knight’s tour problem. It prints one of the possible solutions in 2D matrix form. Basically, the output is a 2D 8*8 matrix with numbers from 0 to 63 and these numbers show steps made by Knight.

*/

import java.io.*;
import java.util.*;

class GFG {
    public static void fillMatrix(int[][] a,int r,int c){
        //int x =10;
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                a[i][j]=-1;
                //x++;
            }
        }
    }
    
    public static void printMatrix(int[][] a,int r,int c){
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                System.out.print(a[i][j]+" ");
            }
            System.out.println();
        }
    }
    
    public static void printIndex(int[][] a,int r,int c){
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                System.out.print(i+","+j+"  ");
            }
            System.out.println();
        }
    }
    
    public static boolean dfs(int[][] a,int i,int j,int endX,int endY,int index){
        
        if(i<0 || i>=a.length || j <0 || j>=a[i].length ||a[i][j]>0 ){
           
            return false;
        }
        //System.out.print(a[i][j]+",");
        a[i][j]=index;
        index++;
        
        /*if(i==endX && j==endY){
            return true;
        }*/
        if(index==65 && (i==endX && j==endY)){
            return true;
        }
        
        boolean found_1 = dfs(a,i-2,j-1,endX,endY,index);//Point 1
        if(found_1){
            return true;
        }
        boolean found_2 = dfs(a,i-1,j-2,endX,endY,index);//Point 2
        if(found_2){
            return true;
        }
        boolean found_3 = dfs(a,i+1,j-2,endX,endY,index);//Point 3
        if(found_3){
            return true;
        }
        boolean found_4 = dfs(a,i+2,j-1,endX,endY,index);//Point 4
        if(found_4){
            return true;
        }
        boolean found_5 = dfs(a,i-2,j+1,endX,endY,index);//Point 5
        if(found_5){
            return true;
        }
        boolean found_6 = dfs(a,i-1,j+2,endX,endY,index);//Point 6
        if(found_6){
            return true;
        }
        boolean found_7 = dfs(a,i+1,j+2,endX,endY,index);//Point 7
        if(found_7){
            return true;
        }
        boolean found_8 = dfs(a,i+2,j+1,endX,endY,index);//Point 8
        if(found_8){
            return true;
        }
       
       a[i][j]=-1;
       return false;
        
        
        
    }
	public static void main (String[] args) {
	  
		
		
		 int r = 8;
		 int c = 8;
		 
		 int[][] a =new int[r][c];
                
		fillMatrix(a,r,c);
	    printMatrix(a,r,c);
	    System.out.println("--------------------");
	   // printIndex(a,r,c);
	    
	    int startX = 0;
	    int startY = 0;
	    
	    int endX = r-1;
	    int endY = c-1;
	    
	    int index = 1;
	    
	    System.out.println(dfs(a,startX,startY,endX,endY,index));
	    
	    System.out.println("--------------------");
	    
	     printMatrix(a,r,c);
	}
	
}
